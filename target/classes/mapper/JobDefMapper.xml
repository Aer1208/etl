<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mongohua.etl.mapper.JobDefMapper" >
    <resultMap id="JobDefMap" type="com.mongohua.etl.model.JobDef" >
        <result column="JOB_ID" property="jobId" jdbcType="INTEGER" />
        <result column="JOB_NAME" property="jobName" jdbcType="VARCHAR" />
        <result column="CMD_NAM" property="cmdName" jdbcType="VARCHAR" />
        <result column="CMD_PATH" property="cmdPath" jdbcType="VARCHAR" />
        <result column="CMD_TYP" property="cmdType" jdbcType="INTEGER" />
        <result column="JOB_VALID" property="jobValid" jdbcType="INTEGER" />
        <result column="JOB_GROUP" property="jobGroup" jdbcType="INTEGER" />
        <result column="MAX_INSTANCE" property="maxInstance" jdbcType="INTEGER" />
        <result column="PRIORTY" property="priorty" jdbcType="INTEGER" />
        <result column="last_status" property="lastStatus" jdbcType="INTEGER" />
        <result column="last_data_date" property="lastDataDate" jdbcType="VARCHAR" />
        <result column="cron_desc" property="cronDesc" jdbcType="VARCHAR" />
        <result column="job_cycle" property="jobCycle" jdbcType="INTEGER" />
        <result column="cycle_unit" property="cycleUnit" jdbcType="INTEGER" />
    </resultMap>
    <sql id="Base_Column_List" >
        A.JOB_ID,A.JOB_NAME,A.CMD_NAM,A.CMD_PATH,A.CMD_TYP,A.JOB_VALID,A.JOB_GROUP,A.MAX_INSTANCE,A.PRIORTY,A.CRON_DESC, A.JOB_CYCLE, A.CYCLE_UNIT
    </sql>
    <select id="getById" resultMap="JobDefMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from t_job_def A
        where job_id = #{jobId,jdbcType=INTEGER}
    </select>
    <select id="getList" resultMap="JobDefMap">
        select
        <include refid="Base_Column_List" />
        from t_job_def A
        where job_valid=1
    </select>

    <select id="getNextJob" resultMap="JobDefMap" >
        select
        <include refid="Base_Column_List" />
        from t_job_def A
              JOIN t_job_ref b on a.job_id=b.job_id
        where b.ref_job_id = #{jobId,jdbcType=INTEGER}
    </select>

    <select id="getPreJob" resultMap="JobDefMap" >
        select
        <include refid="Base_Column_List" />
        from t_job_def A
        JOIN t_job_ref b on a.job_id=b.ref_job_id
        where b.job_id = #{jobId,jdbcType=INTEGER}
    </select>

    <select id="getListForPage" resultMap="JobDefMap" parameterType="HashMap">
        select
        <include refid="Base_Column_List" />
        ,CASE WHEN B.INST_ID IS NULL THEN -1 ELSE B.STATUS END AS last_status
        ,B.DATA_DATE last_data_date
        from t_job_def A
        LEFT JOIN (
           SELECT A.JOB_ID,A.DATA_DATE, A. STATUS,A.INST_ID
           FROM T_JOB_INST A
           JOIN (
           SELECT job_id,
           max(START_TIME) start_time
           FROM t_job_inst
           GROUP BY job_id
           ) b ON A.job_id = b.job_id AND a.start_time = b.start_time
           ) B ON A.job_id=B.job_id
        where A.job_valid=1
        <if test="key != null">
            and (A.job_id like concat(#{key},'%') or A.job_name like concat(#{key},'%') or A.cmd_nam like concat(#{key},'%'))
        </if>
        ORDER BY CASE WHEN B.INST_ID IS NULL THEN -1 ELSE B.STATUS END,B.DATA_DATE
        limit #{pageIndex}, #{pageSize}
    </select>

    <select id="getCount" resultType="java.lang.Integer" parameterType="HashMap">
        select count(*)
          from t_job_def a
          where job_valid=1
          <if test="key != null">
              and (job_id like concat(#{key},'%') or job_name like concat(#{key},'%') or cmd_nam like concat(#{key},'%'))
          </if>
    </select>

    <select id="getListForPage2" resultMap="JobDefMap" parameterType="HashMap">
        select
        <include refid="Base_Column_List" />
        from t_job_def A
      Where 1=1
        <if test="jobDef.jobId != null and jobDef.jobId !=0">
            and job_id like concat(#{jobDef.jobId},'%')
        </if>
        order by job_id
        limit #{pageIndex}, #{pageSize}
    </select>

    <select id="getCount2" resultType="java.lang.Integer" parameterType="com.mongohua.etl.model.JobDef">
        select count(*) from t_job_def a
        Where 1=1
        <if test="jobId != null and jobId !=0">
            and job_id like concat(#{jobId},'%')
        </if>
    </select>

    <delete id="delete" parameterType="java.lang.Integer" >
        delete from t_job_def
        where job_id = #{dsId,jdbcType=INTEGER}
    </delete>
    <insert id="add" parameterType="com.mongohua.etl.model.JobDef" >
        insert into t_job_def (JOB_ID,JOB_NAME,CMD_NAM,CMD_PATH,CMD_TYP,JOB_VALID,JOB_GROUP,MAX_INSTANCE,PRIORTY,CRON_DESC,JOB_CYCLE,CYCLE_UNIT)
        values (#{jobId,jdbcType=INTEGER}, #{jobName,jdbcType=VARCHAR}, #{cmdName,jdbcType=VARCHAR},#{cmdPath, jdbcType=VARCHAR},#{cmdType,jdbcType=INTEGER},
                 #{jobValid, jdbcType=INTEGER},#{jobGroup,jdbcType=VARCHAR},#{maxInstance,jdbcType=INTEGER},#{priorty,jdbcType=INTEGER},
                 #{cronDesc,jdbcType=VARCHAR},#{jobCycle,jdbcType=INTEGER},#{cycleUnit,jdbcType=INTEGER})
    </insert>

    <update id="update" parameterType="com.mongohua.etl.model.JobDef">
        update t_job_def set
        <trim prefix="" suffix="" suffixOverrides=",">
            <if test="jobName != null">
                job_name=#{jobName, jdbcType=VARCHAR},
            </if>
            <if test="cmdName != null">
                cmd_nam=#{cmdName, jdbcType=VARCHAR},
            </if>
            <if test="cmdPath != null ">
                cmd_path = #{cmdPath, jdbcType=VARCHAR},
            </if>
            <if test="jobValid != null">
                job_valid=#{jobValid, jdbcType=VARCHAR},
            </if>
            <if test="jobGroup != null">
                job_group=#{jobGroup, jdbcType=VARCHAR},
            </if>
            <if test="priorty !=null">
                priorty=#{priorty,jdbcType=INTEGER},
            </if>
            <if test="cronDesc != null">
                cron_desc=#{cronDesc, jdbcType=VARCHAR},
            </if>
            <if test="jobCycle != null">
                job_cycle = #{jobCycle, jdbcType=INTEGER},
            </if>
            <if test="cycleUnit != null">
                cycle_unit=#{cycleUnit,jdbcType=INTEGER},
            </if>
        </trim>
        where job_id = #{jobId, jdbcType=INTEGER}
    </update>
</mapper>