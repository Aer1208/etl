<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mongohua.etl.mapper.JobInstMapper" >
    <resultMap id="JobInstMap" type="com.mongohua.etl.model.JobInst" >
        <result column="inst_id" property="instId" jdbcType="INTEGER" />
        <result column="job_id" property="jobId" jdbcType="VARCHAR" />
        <result column="data_date" property="dataDate" jdbcType="VARCHAR" />
        <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
        <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
        <result column="status" property="status" jdbcType="INTEGER" />
        <result column="jobType" property="jobType" jdbcType="INTEGER" />
        <result column="jobName" property="jobName" jdbcType="VARCHAR" />
        <result column="jobCode" property="jobCode" jdbcType="VARCHAR" />
        <result column="host_name" property="hostName" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="Base_Column_List" >
        a.inst_id,a.job_id,a.data_date,a.start_time,a.end_time,a.status,
        b.jobType,
        b.job_name jobName,
        b.cmd_nam jobCode,
        a.host_name
    </sql>

    <select id="getList" resultMap="JobInstMap" parameterType="HashMap">
        select
        <include refid="Base_Column_List" />
        from t_job_inst a
              join (
              select job_id, job_name,cmd_nam,2 jobType from t_job_def where 1=1
            <if test="userId != null and userId !=0 and userId != 1" >
                and user_id = #{userId}
            </if>
              union all
              select ds_id, ds_name, src_tab_nam,1 jobType from t_ds_def where 1=1
            <if test="userId != null and userId !=0 and userId != 1" >
                and user_id = #{userId}
            </if>
        ) b on a.job_id=b.job_id
      Where 1=1
        <if test="jobInst.dataDate != null" >
            AND a.data_date like concat(#{jobInst.dataDate},'%')
        </if>
        <if test="jobInst.jobId != null and jobInst.jobId != 0">
            AND a.job_id like CONCAT(${jobInst.jobId},'%')
        </if>
        <if test="jobInst.status != null and jobInst.status != -1">
            AND a.status = ${jobInst.status}
        </if>

        order by a.start_time desc,a.data_date desc
        limit #{pageIndex}, #{pageSize}
    </select>

    <select id="getCount" parameterType="com.mongohua.etl.model.JobInst" resultType="java.lang.Integer" >
        select count(*)
        from t_job_inst a
            join (
                select job_id, job_name,cmd_nam,2 jobType from t_job_def where 1=1
                <if test="userId != null and userId !=0 and userId != 1" >
                    and user_id = #{userId}
                </if>
                union all
                select ds_id, ds_name, src_tab_nam,1 jobType from t_ds_def where 1=1
                <if test="userId != null and userId !=0 and userId != 1" >
                    and user_id = #{userId}
                </if>
            ) b on a.job_id=b.job_id
        Where 1=1
        <if test="jobInst.dataDate != null" >
            AND a.data_date like concat(#{jobInst.dataDate},'%')
        </if>
        <if test="jobInst.jobId != null and jobInst.jobId != 0">
            AND a.job_id like concat(${jobInst.jobId},'%')
        </if>
        <if test="jobInst.status != null and jobInst.status != -1">
            AND a.status = ${jobInst.status}
        </if>
    </select>

    <select id="getInstLog" parameterType="java.lang.Integer" resultType="java.lang.String">
        select job_log
          from t_inst_log
        where inst_id = #{instId}
    </select>

    <select id="instJob" parameterType="java.lang.Integer" resultMap="JobInstMap" >
        select
              a.inst_id,a.job_id,a.data_date,a.start_time,a.end_time,a.status
        from t_job_inst a
        where job_id =${jobId}
    </select>

    <update id="redoInsts" >
        update t_err_inst set status=1
        where status=0 and inst_id in
        <foreach collection="ids" index="index" item="id"
                 separator="," open="(" close=")">
            #{id,jdbcType=BIGINT}
        </foreach>
    </update>
</mapper>